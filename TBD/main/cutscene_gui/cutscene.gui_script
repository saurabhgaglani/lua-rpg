
local defarc = require "defarc/defarc"

local options = {}

function getOptions()
	local start_text = defarc.get_text()
	local n = gui.get_node("title")
	gui.set_text(n, start_text)
	gui.set_enabled(n, true)

	options = defarc.get_options_table()
	for i = 1,3 do
		local option_text =  options[i] and options[i].label or ""
		local option_node = gui.get_node("option"..i)
		gui.set_text(option_node, option_text)
		gui.set_enabled(option_node, true)
	end
end

function disableAll()
	local box_node = gui.get_node("box")
	local n = gui.get_node("title")
	gui.set_enabled(n, false)
	gui.set_enabled(box_node, false)
	for i = 1,3 do
		local option_node = gui.get_node("option"..i)
		gui.set_enabled(option_node, false)
	end

end
		


function init(self)
	msg.post(".", "acquire_input_focus")
	defarc.load("/assets/dialogue/project_settings.json")

	local start = defarc.get_starting_element_id()
	defarc.select_element(start)
	
end

function on_message(self, message_id, message, sender)
	if message_id == hash("enable_cutscene") then
		local box_node = gui.get_node("box")
		gui.set_enabled(box_node, true)
		getOptions()
		
	elseif message_id == hash("disable_cutscene") then
		disableAll()
		
	end
end

function on_input(self, action_id, action)
	for i = 1,3 do 
		local current_option_node = gui.get_node("option"..i)

		if gui.pick_node(current_option_node, action.x, action.y) then

			gui.set_color(current_option_node,  vmath.vector4(216, 135, 14, 1))

			if action.pressed then
				print("pressed"..options[i].target_id)
			elseif action.released then
				gui.set_scale(current_option_node, vmath.vector3(1,1.25,1))
				defarc.select_element(options[i].target_id)
				getOptions()
			end
		else
			gui.set_color(current_option_node,   vmath.vector4(1, 1, 1, 1))

		end
		
			
	end

end

